- name: install Postgres and setup Master
  hosts: "{{ ansible_limit | default(omit) }}"

  vars_files:
    - vault.yml
    - vars.yml

  handlers:
    - name: Restart postgresql
      ansible.builtin.systemd:
        name: postgresql
        state: restarted
      become: true

  tasks:
    - name: Install PostgreSQL and psycopg2
      ansible.builtin.apt:
        name: postgresql,postgresql-contrib,python3-psycopg2,p7zip-full
        state: present
        update_cache: true
      become: true

    - name: Start and enable the service
      ansible.builtin.systemd:
        name: postgresql
        state: started
        enabled: true
      become: true

    - name: Set options
      community.postgresql.postgresql_set:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
      become: yes
      become_method: sudo
      become_user: postgres
      vars:
        allow_world_readable_tmpfiles: true
      with_items: "{{ postgresql_options }}"
      notify:
        - Restart postgresql

    - name: Create the databases
      community.postgresql.postgresql_db:
        name: "{{ item }}"
        encoding: "UTF-8"
      become: true
      become_user: postgres
      with_items: "{{ postgresql_databases }}"

    - name: Create the users
      community.postgresql.postgresql_user:
        db: "{{ item.db }}"
        name: "{{ item.name }}"
        password: "{{ item.password | default(omit) }}"
      become: true
      become_user: postgres
      environment:
        PGOPTIONS: "-c password_encryption=scram-sha-256"
      with_items: "{{ postgresql_users }}"

    - name: Create the schemas
      community.postgresql.postgresql_schema:
        db: "{{ item.db }}"
        name: "{{ item.name }}"
        owner: "{{ item.name }}"
      become: true
      become_user: postgres
      with_items: "{{ postgresql_schemas }}"

    - name: Set the user privileges
      community.postgresql.postgresql_privs:
        database: "{{ item.db }}"
        state: present
        objs: "{{ item.objs | default(omit) }}"
        privs: "{{ item.privs }}"
        type: "{{ item.type | default(omit) }}"
        roles: "{{ item.roles | default(omit) }}"
      become: true
      become_user: postgres
      with_items: "{{ postgresql_privs | default([]) }}"

    - name: Add entries to pg_hba
      community.postgresql.postgresql_pg_hba:
        dest: "/etc/postgresql/{{ pg_version }}/main/pg_hba.conf"
        address: "{{ item.address | default(omit) }}"
        contype: "{{ item.contype }}"
        databases: "{{ item.databases }}"
        method: "{{ item.method }}"
        users: "{{ item.users }}"
      become: true
      become_user: postgres
      with_items: "{{ postgresql_hba_entries }}"
      notify:
        - Restart postgresql

    - name: Enable the HSTORE extension
      community.postgresql.postgresql_ext:
        name: "{{ item.name }}"
        db: "{{ item.db }}"
        state: present
      become: true
      become_user: postgres
      with_items: "{{ postgresql_extensions }}"
      notify:
        - Restart postgresql
    - name: Grant REPLICATION to user
      community.postgresql.postgresql_query:
        db: infradb-dev
        query:
          - ALTER USER replicator REPLICATION;
          - ALTER USER jtrahan REPLICATION;
      become_user: postgres
      become: true
      notify:
        - Restart postgresql

    - name: Grant REPLICATION to user
      community.postgresql.postgresql_query:
        db: infradb-dev
        query:
          - ALTER USER replicator REPLICATION;
          - ALTER USER jtrahan REPLICATION;
      become_user: postgres
      become: true
      notify:
        - Restart postgresql

    - name: Create directory for pg backups
      ansible.builtin.file:
        path: /pgdumps
        state: directory
        mode: "0775"
        owner: postgres
        group: postgres
      become: true

    - name: Create python venv for b2
      ansible.builtin.command:
        cmd: python3 -m venv /pgdumps/venv
        creates: /pgdumps/venv/bin/activate
      become: yes
      become_user: postgres

    - name: Install pipx in venv
      ansible.builtin.pip:
        name: pipx
        state: present
        virtualenv: /pgdumps/venv
      become: yes
      become_user: postgres

    - name: Install bottle python package
      ansible.builtin.pip:
        name: b2
        state: present
        virtualenv: /pgdumps/venv
      become: yes
      become_user: postgres

    - name: Ensure group "pgbackup" exists
      ansible.builtin.group:
        name: pgbackup
        state: present
        gid: 1900
      become: true

    - name: Create directory for pg backups
      ansible.builtin.file:
        path: /pgdumps/venv
        state: directory
        mode: "0775"
        owner: postgres
        group: pgbackup
      become: true

    - name: Create directory for pg backups
      ansible.builtin.file:
        path: "{{ local_7zip_dir }}"
        state: directory
        mode: "0775"
        owner: postgres
        group: pgbackup
      become: true

    - name: Add users to pgbackup
      ansible.builtin.user:
        name: jtrahan
        groups:
          - postgres
          - jtrahan
          - pgbackup
        append: true
      become: true

    - name: Add postgres user to the pgbackup groups
      ansible.builtin.user:
        name: postgres
        groups:
          - pgbackup
        append: true
      become: true

    - name: Authenticate with b2
      ansible.builtin.command:
        cmd: /pgdumps/venv/bin/b2 account authorize "{{ item.key }}" "{{ item.secret }}"
      with_items: "{{ b2_app_key_and_secret }}"
      become: yes
      become_user: postgres

    - name: Download backup from b2 for go-infra
      ansible.builtin.command:
        cmd: /pgdumps/venv/bin/b2 sync "{{ item.archive_dir_b2 }}" "{{ local_7zip_dir }}"
        creates: "{{ local_7zip_dir }}/k3sdb.7z"
      with_items: "{{ b2_app_key_and_secret }}"
      become: yes
      become_user: postgres

    - name: Unarchive a file with extra options
      ansible.builtin.command:
        cmd: 7z x {{ item.goinfra_archive_file }} "-p{{ item.pw }}"
        chdir: /pgdumps/7z_backups
        creates: "{{ item.goinfra_sql_file }}"
      with_items: "{{ seven_z_pw }}"

    - name: Unarchive a file with extra options
      ansible.builtin.command:
        cmd: 7z x {{ item.k3s_archive_file }} "-p{{ item.pw }}"
        chdir: /pgdumps/7z_backups
        creates: "{{ item.k3s_sql_file }}"
      with_items: "{{ seven_z_pw }}"

    - name: Grant access to restored db
      become: yes
      become_user: postgres
      postgresql_privs:
        db: "{{ item.db_name }}"
        role: "{{ item.db_user }}"
        objs: ALL_IN_SCHEMA
        privs: SELECT,INSERT,UPDATE,DELETE
      with_items: "{{ seven_z_pw }}"

    - name: Grant access to restored db
      become: yes
      become_user: postgres
      postgresql_privs:
        db: "{{ item.k3s_db_name }}"
        role: "{{ item.k3s_db_user }}"
        objs: ALL_IN_SCHEMA
        privs: SELECT,INSERT,UPDATE,DELETE
      with_items: "{{ seven_z_pw }}"

    - name: Grant access to restored db
      become: yes
      become_user: postgres
      postgresql_privs:
        db: "{{ item.k3s_db_name }}"
        role: "{{ item.db_user }}"
        objs: ALL_IN_SCHEMA
        privs: SELECT,INSERT,UPDATE,DELETE
      with_items: "{{ seven_z_pw }}"




